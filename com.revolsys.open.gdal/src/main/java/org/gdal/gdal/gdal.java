/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.gdal.gdal;

public class gdal {

  public static void AllRegister() {
    gdalJNI.AllRegister();
  }

  public static void ApplyGeoTransform(final double[] padfGeoTransform, final double dfPixel,
    final double dfLine, final double[] pdfGeoX, final double[] pdfGeoY) {
    gdalJNI.ApplyGeoTransform(padfGeoTransform, dfPixel, dfLine, pdfGeoX, pdfGeoY);
  }

  public static Dataset AutoCreateWarpedVRT(final Dataset src_ds) {
    final long cPtr = gdalJNI.AutoCreateWarpedVRT__SWIG_4(Dataset.getCPtr(src_ds), src_ds);
    return cPtr == 0 ? null : new Dataset(cPtr, true);
  }

  public static Dataset AutoCreateWarpedVRT(final Dataset src_ds, final String src_wkt) {
    final long cPtr = gdalJNI.AutoCreateWarpedVRT__SWIG_3(Dataset.getCPtr(src_ds), src_ds, src_wkt);
    return cPtr == 0 ? null : new Dataset(cPtr, true);
  }

  public static Dataset AutoCreateWarpedVRT(final Dataset src_ds, final String src_wkt,
    final String dst_wkt) {
    final long cPtr = gdalJNI.AutoCreateWarpedVRT__SWIG_2(Dataset.getCPtr(src_ds), src_ds, src_wkt,
      dst_wkt);
    return cPtr == 0 ? null : new Dataset(cPtr, true);
  }

  public static Dataset AutoCreateWarpedVRT(final Dataset src_ds, final String src_wkt,
    final String dst_wkt, final int eResampleAlg) {
    final long cPtr = gdalJNI.AutoCreateWarpedVRT__SWIG_1(Dataset.getCPtr(src_ds), src_ds, src_wkt,
      dst_wkt, eResampleAlg);
    return cPtr == 0 ? null : new Dataset(cPtr, true);
  }

  public static Dataset AutoCreateWarpedVRT(final Dataset src_ds, final String src_wkt,
    final String dst_wkt, final int eResampleAlg, final double maxerror) {
    final long cPtr = gdalJNI.AutoCreateWarpedVRT__SWIG_0(Dataset.getCPtr(src_ds), src_ds, src_wkt,
      dst_wkt, eResampleAlg, maxerror);
    return cPtr == 0 ? null : new Dataset(cPtr, true);
  }

  public static int ComputeMedianCutPCT(final Band red, final Band green, final Band blue,
    final int num_colors, final ColorTable colors) {
    return gdalJNI.ComputeMedianCutPCT__SWIG_2(Band.getCPtr(red), red, Band.getCPtr(green), green,
      Band.getCPtr(blue), blue, num_colors, ColorTable.getCPtr(colors), colors);
  }

  public static int ComputeMedianCutPCT(final Band red, final Band green, final Band blue,
    final int num_colors, final ColorTable colors, final ProgressCallback callback) {
    return gdalJNI.ComputeMedianCutPCT__SWIG_0(Band.getCPtr(red), red, Band.getCPtr(green), green,
      Band.getCPtr(blue), blue, num_colors, ColorTable.getCPtr(colors), colors, callback);
  }

  public static int ComputeProximity(final Band srcBand, final Band proximityBand) {
    return gdalJNI.ComputeProximity__SWIG_3(Band.getCPtr(srcBand), srcBand,
      Band.getCPtr(proximityBand), proximityBand);
  }

  public static int ComputeProximity(final Band srcBand, final Band proximityBand,
    final java.util.Vector options) {
    return gdalJNI.ComputeProximity__SWIG_2(Band.getCPtr(srcBand), srcBand,
      Band.getCPtr(proximityBand), proximityBand, options);
  }

  public static int ComputeProximity(final Band srcBand, final Band proximityBand,
    final java.util.Vector options, final ProgressCallback callback) {
    return gdalJNI.ComputeProximity__SWIG_0(Band.getCPtr(srcBand), srcBand,
      Band.getCPtr(proximityBand), proximityBand, options, callback);
  }

  public static int ContourGenerate(final Band srcBand, final double contourInterval,
    final double contourBase, final double[] fixedLevelCount, final int useNoData,
    final double noDataValue, final org.gdal.ogr.Layer dstLayer, final int idField,
    final int elevField) {
    return gdalJNI.ContourGenerate__SWIG_2(Band.getCPtr(srcBand), srcBand, contourInterval,
      contourBase, fixedLevelCount, useNoData, noDataValue, dstLayer, idField, elevField);
  }

  public static int ContourGenerate(final Band srcBand, final double contourInterval,
    final double contourBase, final double[] fixedLevelCount, final int useNoData,
    final double noDataValue, final org.gdal.ogr.Layer dstLayer, final int idField,
    final int elevField, final ProgressCallback callback) {
    return gdalJNI.ContourGenerate__SWIG_0(Band.getCPtr(srcBand), srcBand, contourInterval,
      contourBase, fixedLevelCount, useNoData, noDataValue, dstLayer, idField, elevField, callback);
  }

  public static String CPLBinaryToHex(final byte[] nBytes) {
    return gdalJNI.CPLBinaryToHex(nBytes);
  }

  public static byte[] CPLHexToBinary(final String pszHex) {
    return gdalJNI.CPLHexToBinary(pszHex);
  }

  public static int DataTypeIsComplex(final int eDataType) {
    return gdalJNI.DataTypeIsComplex(eDataType);
  }

  public static void Debug(final String msg_class, final String message) {
    gdalJNI.Debug(msg_class, message);
  }

  public static String DecToDMS(final double dfAngle, final String pszAxis) {
    return gdalJNI.DecToDMS__SWIG_1(dfAngle, pszAxis);
  }

  public static String DecToDMS(final double dfAngle, final String pszAxis, final int nPrecision) {
    return gdalJNI.DecToDMS__SWIG_0(dfAngle, pszAxis, nPrecision);
  }

  public static double DecToPackedDMS(final double dfDec) {
    return gdalJNI.DecToPackedDMS(dfDec);
  }

  public static int DitherRGB2PCT(final Band red, final Band green, final Band blue,
    final Band target, final ColorTable colors) {
    return gdalJNI.DitherRGB2PCT__SWIG_2(Band.getCPtr(red), red, Band.getCPtr(green), green,
      Band.getCPtr(blue), blue, Band.getCPtr(target), target, ColorTable.getCPtr(colors), colors);
  }

  public static int DitherRGB2PCT(final Band red, final Band green, final Band blue,
    final Band target, final ColorTable colors, final ProgressCallback callback) {
    return gdalJNI.DitherRGB2PCT__SWIG_0(Band.getCPtr(red), red, Band.getCPtr(green), green,
      Band.getCPtr(blue), blue, Band.getCPtr(target), target, ColorTable.getCPtr(colors), colors,
      callback);
  }

  public static void Error(final int msg_class, final int err_code, final String msg) {
    gdalJNI.Error(msg_class, err_code, msg);
  }

  public static void ErrorReset() {
    gdalJNI.ErrorReset();
  }

  public static String EscapeString(final byte[] len, final int scheme) {
    return gdalJNI.EscapeString__SWIG_0(len, scheme);
  }

  public static String EscapeString(final String str, final int scheme) {
    return gdalJNI.EscapeString__SWIG_1(str, scheme);
  }

  public static void FileFromMemBuffer(final String utf8_path, final byte[] nBytes) {
    gdalJNI.FileFromMemBuffer(utf8_path, nBytes);
  }

  public static int FillNodata(final Band targetBand, final Band maskBand,
    final double maxSearchDist, final int smoothingIterations) {
    return gdalJNI.FillNodata__SWIG_3(Band.getCPtr(targetBand), targetBand, Band.getCPtr(maskBand),
      maskBand, maxSearchDist, smoothingIterations);
  }

  public static int FillNodata(final Band targetBand, final Band maskBand,
    final double maxSearchDist, final int smoothingIterations, final java.util.Vector options) {
    return gdalJNI.FillNodata__SWIG_2(Band.getCPtr(targetBand), targetBand, Band.getCPtr(maskBand),
      maskBand, maxSearchDist, smoothingIterations, options);
  }

  public static int FillNodata(final Band targetBand, final Band maskBand,
    final double maxSearchDist, final int smoothingIterations, final java.util.Vector options,
    final ProgressCallback callback) {
    return gdalJNI.FillNodata__SWIG_0(Band.getCPtr(targetBand), targetBand, Band.getCPtr(maskBand),
      maskBand, maxSearchDist, smoothingIterations, options, callback);
  }

  public static void FinderClean() {
    gdalJNI.FinderClean();
  }

  public static String FindFile(final String pszClass, final String utf8_path) {
    return gdalJNI.FindFile(pszClass, utf8_path);
  }

  public static int GCPsToGeoTransform(final GCP[] nGCPs, final double[] argout) {
    return gdalJNI.GCPsToGeoTransform__SWIG_1(nGCPs, argout);
  }

  public static int GCPsToGeoTransform(final GCP[] nGCPs, final double[] argout, final int bApproxOK) {
    return gdalJNI.GCPsToGeoTransform__SWIG_0(nGCPs, argout, bApproxOK);
  }

  public static double GDAL_GCP_GCPLine_get(final GCP gcp) {
    return gdalJNI.GDAL_GCP_GCPLine_get(GCP.getCPtr(gcp), gcp);
  }

  public static void GDAL_GCP_GCPLine_set(final GCP gcp, final double dfGCPLine) {
    gdalJNI.GDAL_GCP_GCPLine_set(GCP.getCPtr(gcp), gcp, dfGCPLine);
  }

  public static double GDAL_GCP_GCPPixel_get(final GCP gcp) {
    return gdalJNI.GDAL_GCP_GCPPixel_get(GCP.getCPtr(gcp), gcp);
  }

  public static void GDAL_GCP_GCPPixel_set(final GCP gcp, final double dfGCPPixel) {
    gdalJNI.GDAL_GCP_GCPPixel_set(GCP.getCPtr(gcp), gcp, dfGCPPixel);
  }

  public static double GDAL_GCP_GCPX_get(final GCP gcp) {
    return gdalJNI.GDAL_GCP_GCPX_get(GCP.getCPtr(gcp), gcp);
  }

  public static void GDAL_GCP_GCPX_set(final GCP gcp, final double dfGCPX) {
    gdalJNI.GDAL_GCP_GCPX_set(GCP.getCPtr(gcp), gcp, dfGCPX);
  }

  public static double GDAL_GCP_GCPY_get(final GCP gcp) {
    return gdalJNI.GDAL_GCP_GCPY_get(GCP.getCPtr(gcp), gcp);
  }

  public static void GDAL_GCP_GCPY_set(final GCP gcp, final double dfGCPY) {
    gdalJNI.GDAL_GCP_GCPY_set(GCP.getCPtr(gcp), gcp, dfGCPY);
  }

  public static double GDAL_GCP_GCPZ_get(final GCP gcp) {
    return gdalJNI.GDAL_GCP_GCPZ_get(GCP.getCPtr(gcp), gcp);
  }

  public static void GDAL_GCP_GCPZ_set(final GCP gcp, final double dfGCPZ) {
    gdalJNI.GDAL_GCP_GCPZ_set(GCP.getCPtr(gcp), gcp, dfGCPZ);
  }

  public static double GDAL_GCP_get_GCPLine(final GCP gcp) {
    return gdalJNI.GDAL_GCP_get_GCPLine(GCP.getCPtr(gcp), gcp);
  }

  public static double GDAL_GCP_get_GCPPixel(final GCP gcp) {
    return gdalJNI.GDAL_GCP_get_GCPPixel(GCP.getCPtr(gcp), gcp);
  }

  public static double GDAL_GCP_get_GCPX(final GCP gcp) {
    return gdalJNI.GDAL_GCP_get_GCPX(GCP.getCPtr(gcp), gcp);
  }

  public static double GDAL_GCP_get_GCPY(final GCP gcp) {
    return gdalJNI.GDAL_GCP_get_GCPY(GCP.getCPtr(gcp), gcp);
  }

  public static double GDAL_GCP_get_GCPZ(final GCP gcp) {
    return gdalJNI.GDAL_GCP_get_GCPZ(GCP.getCPtr(gcp), gcp);
  }

  public static String GDAL_GCP_get_Id(final GCP gcp) {
    return gdalJNI.GDAL_GCP_get_Id(GCP.getCPtr(gcp), gcp);
  }

  public static String GDAL_GCP_get_Info(final GCP gcp) {
    return gdalJNI.GDAL_GCP_get_Info(GCP.getCPtr(gcp), gcp);
  }

  public static String GDAL_GCP_Id_get(final GCP gcp) {
    return gdalJNI.GDAL_GCP_Id_get(GCP.getCPtr(gcp), gcp);
  }

  public static void GDAL_GCP_Id_set(final GCP gcp, final String pszId) {
    gdalJNI.GDAL_GCP_Id_set(GCP.getCPtr(gcp), gcp, pszId);
  }

  public static String GDAL_GCP_Info_get(final GCP gcp) {
    return gdalJNI.GDAL_GCP_Info_get(GCP.getCPtr(gcp), gcp);
  }

  public static void GDAL_GCP_Info_set(final GCP gcp, final String pszInfo) {
    gdalJNI.GDAL_GCP_Info_set(GCP.getCPtr(gcp), gcp, pszInfo);
  }

  public static void GDAL_GCP_set_GCPLine(final GCP gcp, final double dfGCPLine) {
    gdalJNI.GDAL_GCP_set_GCPLine(GCP.getCPtr(gcp), gcp, dfGCPLine);
  }

  public static void GDAL_GCP_set_GCPPixel(final GCP gcp, final double dfGCPPixel) {
    gdalJNI.GDAL_GCP_set_GCPPixel(GCP.getCPtr(gcp), gcp, dfGCPPixel);
  }

  public static void GDAL_GCP_set_GCPX(final GCP gcp, final double dfGCPX) {
    gdalJNI.GDAL_GCP_set_GCPX(GCP.getCPtr(gcp), gcp, dfGCPX);
  }

  public static void GDAL_GCP_set_GCPY(final GCP gcp, final double dfGCPY) {
    gdalJNI.GDAL_GCP_set_GCPY(GCP.getCPtr(gcp), gcp, dfGCPY);
  }

  public static void GDAL_GCP_set_GCPZ(final GCP gcp, final double dfGCPZ) {
    gdalJNI.GDAL_GCP_set_GCPZ(GCP.getCPtr(gcp), gcp, dfGCPZ);
  }

  public static void GDAL_GCP_set_Id(final GCP gcp, final String pszId) {
    gdalJNI.GDAL_GCP_set_Id(GCP.getCPtr(gcp), gcp, pszId);
  }

  public static void GDAL_GCP_set_Info(final GCP gcp, final String pszInfo) {
    gdalJNI.GDAL_GCP_set_Info(GCP.getCPtr(gcp), gcp, pszInfo);
  }

  public static void GDALDestroyDriverManager() {
    gdalJNI.GDALDestroyDriverManager();
  }

  public static java.util.Vector GeneralCmdLineProcessor(final java.util.Vector papszArgv) {
    return gdalJNI.GeneralCmdLineProcessor__SWIG_1(papszArgv);
  }

  public static java.util.Vector GeneralCmdLineProcessor(final java.util.Vector papszArgv,
    final int nOptions) {
    return gdalJNI.GeneralCmdLineProcessor__SWIG_0(papszArgv, nOptions);
  }

  public static String[] GeneralCmdLineProcessor(final String[] args) {
    return GeneralCmdLineProcessor(args, 0);
  }

  public static String[] GeneralCmdLineProcessor(String[] args, final int nOptions) {
    java.util.Vector vArgs = new java.util.Vector();
    int i;
    for (i = 0; i < args.length; i++) {
      vArgs.addElement(args[i]);
    }

    vArgs = GeneralCmdLineProcessor(vArgs, nOptions);
    final java.util.Enumeration eArgs = vArgs.elements();
    args = new String[vArgs.size()];
    i = 0;
    while (eArgs.hasMoreElements()) {
      final String arg = (String)eArgs.nextElement();
      args[i++] = arg;
    }

    return args;
  }

  public static int GetCacheMax() {
    return gdalJNI.GetCacheMax();
  }

  public static int GetCacheUsed() {
    return gdalJNI.GetCacheUsed();
  }

  public static String GetColorInterpretationName(final int eColorInterp) {
    return gdalJNI.GetColorInterpretationName(eColorInterp);
  }

  public static String GetConfigOption(final String pszKey) {
    return gdalJNI.GetConfigOption__SWIG_1(pszKey);
  }

  public static String GetConfigOption(final String pszKey, final String pszDefault) {
    return gdalJNI.GetConfigOption__SWIG_0(pszKey, pszDefault);
  }

  public static int GetDataTypeByName(final String pszDataTypeName) {
    return gdalJNI.GetDataTypeByName(pszDataTypeName);
  }

  public static String GetDataTypeName(final int eDataType) {
    return gdalJNI.GetDataTypeName(eDataType);
  }

  public static int GetDataTypeSize(final int eDataType) {
    return gdalJNI.GetDataTypeSize(eDataType);
  }

  public static Driver GetDriver(final int i) {
    final long cPtr = gdalJNI.GetDriver(i);
    return cPtr == 0 ? null : new Driver(cPtr, false);
  }

  public static Driver GetDriverByName(final String name) {
    final long cPtr = gdalJNI.GetDriverByName(name);
    return cPtr == 0 ? null : new Driver(cPtr, false);
  }

  public static int GetDriverCount() {
    return gdalJNI.GetDriverCount();
  }

  public static String GetLastErrorMsg() {
    return gdalJNI.GetLastErrorMsg();
  }

  public static int GetLastErrorNo() {
    return gdalJNI.GetLastErrorNo();
  }

  public static int GetLastErrorType() {
    return gdalJNI.GetLastErrorType();
  }

  public static String GetPaletteInterpretationName(final int ePaletteInterp) {
    return gdalJNI.GetPaletteInterpretationName(ePaletteInterp);
  }

  public static String GOA2GetAccessToken(final String pszRefreshToken, final String pszScope) {
    return gdalJNI.GOA2GetAccessToken(pszRefreshToken, pszScope);
  }

  public static String GOA2GetAuthorizationURL(final String pszScope) {
    return gdalJNI.GOA2GetAuthorizationURL(pszScope);
  }

  public static String GOA2GetRefreshToken(final String pszAuthToken, final String pszScope) {
    return gdalJNI.GOA2GetRefreshToken(pszAuthToken, pszScope);
  }

  public static int GridCreate(final String algorithmOptions, final double[][] points,
    final double xMin, final double xMax, final double yMin, final double yMax, final int xSize,
    final int ySize, final int dataType, final java.nio.ByteBuffer nioBuffer) {
    return gdalJNI.GridCreate__SWIG_2(algorithmOptions, points, xMin, xMax, yMin, yMax, xSize,
      ySize, dataType, nioBuffer);
  }

  public static int GridCreate(final String algorithmOptions, final double[][] points,
    final double xMin, final double xMax, final double yMin, final double yMax, final int xSize,
    final int ySize, final int dataType, final java.nio.ByteBuffer nioBuffer,
    final ProgressCallback callback) {
    return gdalJNI.GridCreate__SWIG_0(algorithmOptions, points, xMin, xMax, yMin, yMax, xSize,
      ySize, dataType, nioBuffer, callback);
  }

  public static int HasThreadSupport() {
    return gdalJNI.HasThreadSupport();
  }

  public static Driver IdentifyDriver(final String utf8_path) {
    final long cPtr = gdalJNI.IdentifyDriver__SWIG_1(utf8_path);
    return cPtr == 0 ? null : new Driver(cPtr, false);
  }

  public static Driver IdentifyDriver(final String utf8_path, final java.util.Vector papszSiblings) {
    final long cPtr = gdalJNI.IdentifyDriver__SWIG_0(utf8_path, papszSiblings);
    return cPtr == 0 ? null : new Driver(cPtr, false);
  }

  public static double[] InvGeoTransform(final double[] gt_in) {
    final double gt_out[] = new double[6];
    if (InvGeoTransform(gt_in, gt_out) == 1) {
      return gt_out;
    } else {
      return null;
    }
  }

  public static int InvGeoTransform(final double[] gt_in, final double[] gt_out) {
    return gdalJNI.InvGeoTransform(gt_in, gt_out);
  }

  public static int Mkdir(final String utf8_path, final int mode) {
    return gdalJNI.Mkdir(utf8_path, mode);
  }

  public static Dataset Open(final String name) {
    final long cPtr = gdalJNI.Open__SWIG_1(name);
    return cPtr == 0 ? null : new Dataset(cPtr, true);
  }

  public static Dataset Open(final String utf8_path, final int eAccess) {
    final long cPtr = gdalJNI.Open__SWIG_0(utf8_path, eAccess);
    return cPtr == 0 ? null : new Dataset(cPtr, true);
  }

  public static Dataset OpenShared(final String utf8_path) {
    final long cPtr = gdalJNI.OpenShared__SWIG_1(utf8_path);
    return cPtr == 0 ? null : new Dataset(cPtr, true);
  }

  public static Dataset OpenShared(final String utf8_path, final int eAccess) {
    final long cPtr = gdalJNI.OpenShared__SWIG_0(utf8_path, eAccess);
    return cPtr == 0 ? null : new Dataset(cPtr, true);
  }

  public static double PackedDMSToDec(final double dfPacked) {
    return gdalJNI.PackedDMSToDec(dfPacked);
  }

  public static XMLNode ParseXMLString(final String pszXMLString) {
    final long cPtr = gdalJNI.ParseXMLString(pszXMLString);
    return cPtr == 0 ? null : new XMLNode(cPtr, true);
  }

  public static int Polygonize(final Band srcBand, final Band maskBand,
    final org.gdal.ogr.Layer outLayer, final int iPixValField) {
    return gdalJNI.Polygonize__SWIG_3(Band.getCPtr(srcBand), srcBand, Band.getCPtr(maskBand),
      maskBand, outLayer, iPixValField);
  }

  public static int Polygonize(final Band srcBand, final Band maskBand,
    final org.gdal.ogr.Layer outLayer, final int iPixValField, final java.util.Vector options) {
    return gdalJNI.Polygonize__SWIG_2(Band.getCPtr(srcBand), srcBand, Band.getCPtr(maskBand),
      maskBand, outLayer, iPixValField, options);
  }

  public static int Polygonize(final Band srcBand, final Band maskBand,
    final org.gdal.ogr.Layer outLayer, final int iPixValField, final java.util.Vector options,
    final ProgressCallback callback) {
    return gdalJNI.Polygonize__SWIG_0(Band.getCPtr(srcBand), srcBand, Band.getCPtr(maskBand),
      maskBand, outLayer, iPixValField, options, callback);
  }

  public static void PopErrorHandler() {
    gdalJNI.PopErrorHandler();
  }

  public static void PopFinderLocation() {
    gdalJNI.PopFinderLocation();
  }

  public static int PushErrorHandler() {
    return gdalJNI.PushErrorHandler__SWIG_1();
  }

  public static int PushErrorHandler(final String pszCallbackName) {
    return gdalJNI.PushErrorHandler__SWIG_0(pszCallbackName);
  }

  public static void PushFinderLocation(final String utf8_path) {
    gdalJNI.PushFinderLocation(utf8_path);
  }

  public static int RasterizeLayer(final Dataset dataset, final int[] bands,
    final org.gdal.ogr.Layer layer) {
    return gdalJNI.RasterizeLayer__SWIG_5(Dataset.getCPtr(dataset), dataset, bands, layer);
  }

  public static int RasterizeLayer(final Dataset dataset, final int[] bands,
    final org.gdal.ogr.Layer layer, final double[] burn_values) {
    return gdalJNI.RasterizeLayer__SWIG_3(Dataset.getCPtr(dataset), dataset, bands, layer,
      burn_values);
  }

  public static int RasterizeLayer(final Dataset dataset, final int[] bands,
    final org.gdal.ogr.Layer layer, final double[] burn_values, final java.util.Vector options) {
    return gdalJNI.RasterizeLayer__SWIG_2(Dataset.getCPtr(dataset), dataset, bands, layer,
      burn_values, options);
  }

  public static int RasterizeLayer(final Dataset dataset, final int[] bands,
    final org.gdal.ogr.Layer layer, final double[] burn_values, final java.util.Vector options,
    final ProgressCallback callback) {
    return gdalJNI.RasterizeLayer__SWIG_0(Dataset.getCPtr(dataset), dataset, bands, layer,
      burn_values, options, callback);
  }

  public static java.util.Vector ReadDir(final String utf8_path) {
    return gdalJNI.ReadDir(utf8_path);
  }

  public static java.util.Vector ReadDirRecursive(final String utf8_path) {
    return gdalJNI.ReadDirRecursive(utf8_path);
  }

  public static int RegenerateOverview(final Band srcBand, final Band overviewBand) {
    return gdalJNI.RegenerateOverview__SWIG_3(Band.getCPtr(srcBand), srcBand,
      Band.getCPtr(overviewBand), overviewBand);
  }

  public static int RegenerateOverview(final Band srcBand, final Band overviewBand,
    final String resampling) {
    return gdalJNI.RegenerateOverview__SWIG_2(Band.getCPtr(srcBand), srcBand,
      Band.getCPtr(overviewBand), overviewBand, resampling);
  }

  public static int RegenerateOverview(final Band srcBand, final Band overviewBand,
    final String resampling, final ProgressCallback callback) {
    return gdalJNI.RegenerateOverview__SWIG_0(Band.getCPtr(srcBand), srcBand,
      Band.getCPtr(overviewBand), overviewBand, resampling, callback);
  }

  public static int RegenerateOverviews(final Band srcBand, final Band[] overviewBandCount) {
    return gdalJNI.RegenerateOverviews__SWIG_3(Band.getCPtr(srcBand), srcBand, overviewBandCount);
  }

  public static int RegenerateOverviews(final Band srcBand, final Band[] overviewBandCount,
    final String resampling) {
    return gdalJNI.RegenerateOverviews__SWIG_2(Band.getCPtr(srcBand), srcBand, overviewBandCount,
      resampling);
  }

  public static int RegenerateOverviews(final Band srcBand, final Band[] overviewBandCount,
    final String resampling, final ProgressCallback callback) {
    return gdalJNI.RegenerateOverviews__SWIG_0(Band.getCPtr(srcBand), srcBand, overviewBandCount,
      resampling, callback);
  }

  public static int Rename(final String pszOld, final String pszNew) {
    return gdalJNI.Rename(pszOld, pszNew);
  }

  public static int ReprojectImage(final Dataset src_ds, final Dataset dst_ds) {
    return gdalJNI.ReprojectImage__SWIG_7(Dataset.getCPtr(src_ds), src_ds, Dataset.getCPtr(dst_ds),
      dst_ds);
  }

  public static int ReprojectImage(final Dataset src_ds, final Dataset dst_ds, final String src_wkt) {
    return gdalJNI.ReprojectImage__SWIG_6(Dataset.getCPtr(src_ds), src_ds, Dataset.getCPtr(dst_ds),
      dst_ds, src_wkt);
  }

  public static int ReprojectImage(final Dataset src_ds, final Dataset dst_ds,
    final String src_wkt, final String dst_wkt) {
    return gdalJNI.ReprojectImage__SWIG_5(Dataset.getCPtr(src_ds), src_ds, Dataset.getCPtr(dst_ds),
      dst_ds, src_wkt, dst_wkt);
  }

  public static int ReprojectImage(final Dataset src_ds, final Dataset dst_ds,
    final String src_wkt, final String dst_wkt, final int eResampleAlg) {
    return gdalJNI.ReprojectImage__SWIG_4(Dataset.getCPtr(src_ds), src_ds, Dataset.getCPtr(dst_ds),
      dst_ds, src_wkt, dst_wkt, eResampleAlg);
  }

  public static int ReprojectImage(final Dataset src_ds, final Dataset dst_ds,
    final String src_wkt, final String dst_wkt, final int eResampleAlg, final double WarpMemoryLimit) {
    return gdalJNI.ReprojectImage__SWIG_3(Dataset.getCPtr(src_ds), src_ds, Dataset.getCPtr(dst_ds),
      dst_ds, src_wkt, dst_wkt, eResampleAlg, WarpMemoryLimit);
  }

  public static int ReprojectImage(final Dataset src_ds, final Dataset dst_ds,
    final String src_wkt, final String dst_wkt, final int eResampleAlg,
    final double WarpMemoryLimit, final double maxerror) {
    return gdalJNI.ReprojectImage__SWIG_2(Dataset.getCPtr(src_ds), src_ds, Dataset.getCPtr(dst_ds),
      dst_ds, src_wkt, dst_wkt, eResampleAlg, WarpMemoryLimit, maxerror);
  }

  public static int ReprojectImage(final Dataset src_ds, final Dataset dst_ds,
    final String src_wkt, final String dst_wkt, final int eResampleAlg,
    final double WarpMemoryLimit, final double maxerror, final ProgressCallback callback) {
    return gdalJNI.ReprojectImage__SWIG_0(Dataset.getCPtr(src_ds), src_ds, Dataset.getCPtr(dst_ds),
      dst_ds, src_wkt, dst_wkt, eResampleAlg, WarpMemoryLimit, maxerror, callback);
  }

  public static int Rmdir(final String utf8_path) {
    return gdalJNI.Rmdir(utf8_path);
  }

  public static String SerializeXMLTree(final XMLNode xmlnode) {
    return gdalJNI.SerializeXMLTree(XMLNode.getCPtr(xmlnode), xmlnode);
  }

  public static void SetCacheMax(final int nBytes) {
    gdalJNI.SetCacheMax(nBytes);
  }

  public static void SetConfigOption(final String pszKey, final String pszValue) {
    gdalJNI.SetConfigOption(pszKey, pszValue);
  }

  public static int SetErrorHandler() {
    return gdalJNI.SetErrorHandler__SWIG_1();
  }

  public static int SetErrorHandler(final String pszCallbackName) {
    return gdalJNI.SetErrorHandler__SWIG_0(pszCallbackName);
  }

  public static int SieveFilter(final Band srcBand, final Band maskBand, final Band dstBand,
    final int threshold) {
    return gdalJNI.SieveFilter__SWIG_4(Band.getCPtr(srcBand), srcBand, Band.getCPtr(maskBand),
      maskBand, Band.getCPtr(dstBand), dstBand, threshold);
  }

  public static int SieveFilter(final Band srcBand, final Band maskBand, final Band dstBand,
    final int threshold, final int connectedness) {
    return gdalJNI.SieveFilter__SWIG_3(Band.getCPtr(srcBand), srcBand, Band.getCPtr(maskBand),
      maskBand, Band.getCPtr(dstBand), dstBand, threshold, connectedness);
  }

  public static int SieveFilter(final Band srcBand, final Band maskBand, final Band dstBand,
    final int threshold, final int connectedness, final java.util.Vector options) {
    return gdalJNI.SieveFilter__SWIG_2(Band.getCPtr(srcBand), srcBand, Band.getCPtr(maskBand),
      maskBand, Band.getCPtr(dstBand), dstBand, threshold, connectedness, options);
  }

  public static int SieveFilter(final Band srcBand, final Band maskBand, final Band dstBand,
    final int threshold, final int connectedness, final java.util.Vector options,
    final ProgressCallback callback) {
    return gdalJNI.SieveFilter__SWIG_0(Band.getCPtr(srcBand), srcBand, Band.getCPtr(maskBand),
      maskBand, Band.getCPtr(dstBand), dstBand, threshold, connectedness, options, callback);
  }

  public static int Unlink(final String utf8_path) {
    return gdalJNI.Unlink(utf8_path);
  }

  public static String VersionInfo() {
    return gdalJNI.VersionInfo__SWIG_1();
  }

  public static String VersionInfo(final String request) {
    return gdalJNI.VersionInfo__SWIG_0(request);
  }

  /* Uninstanciable class */
  private gdal() {
  }

}
