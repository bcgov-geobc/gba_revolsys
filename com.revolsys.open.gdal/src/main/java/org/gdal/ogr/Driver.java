/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.39
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.gdal.ogr;

public class Driver {
  protected static long getCPtr(final Driver obj) {
    return obj == null ? 0 : obj.swigCPtr;
  }

  protected static long getCPtrAndDisown(final Driver obj) {
    if (obj != null) {
      obj.swigCMemOwn = false;
    }
    return getCPtr(obj);
  }

  private long swigCPtr;

  protected boolean swigCMemOwn;

  protected Driver(final long cPtr, final boolean cMemoryOwn) {
    if (cPtr == 0) {
      throw new RuntimeException();
    }
    this.swigCMemOwn = cMemoryOwn;
    this.swigCPtr = cPtr;
  }

  /* Ensure that the GC doesn't collect any parent instance set from Java */
  protected void addReference(final Object reference) {
  }

  public DataSource CopyDataSource(final DataSource copy_ds,
    final String utf8_path) {
    final long cPtr = ogrJNI.Driver_CopyDataSource__SWIG_1(this.swigCPtr, this,
      DataSource.getCPtr(copy_ds), copy_ds, utf8_path);
    return cPtr == 0 ? null : new DataSource(cPtr, true);
  }

  public DataSource CopyDataSource(final DataSource copy_ds,
    final String utf8_path, final java.util.Vector options) {
    final long cPtr = ogrJNI.Driver_CopyDataSource__SWIG_0(this.swigCPtr, this,
      DataSource.getCPtr(copy_ds), copy_ds, utf8_path, options);
    return cPtr == 0 ? null : new DataSource(cPtr, true);
  }

  public DataSource CreateDataSource(final String utf8_path) {
    final long cPtr = ogrJNI.Driver_CreateDataSource__SWIG_1(this.swigCPtr,
      this, utf8_path);
    return cPtr == 0 ? null : new DataSource(cPtr, true);
  }

  public DataSource CreateDataSource(final String utf8_path,
    final java.util.Vector options) {
    final long cPtr = ogrJNI.Driver_CreateDataSource__SWIG_0(this.swigCPtr,
      this, utf8_path, options);
    return cPtr == 0 ? null : new DataSource(cPtr, true);
  }

  public synchronized void delete() {
    if (this.swigCPtr != 0 && this.swigCMemOwn) {
      this.swigCMemOwn = false;
      throw new UnsupportedOperationException(
        "C++ destructor does not have public access");
    }
    this.swigCPtr = 0;
  }

  public int DeleteDataSource(final String utf8_path) {
    return ogrJNI.Driver_DeleteDataSource(this.swigCPtr, this, utf8_path);
  }

  public void Deregister() {
    ogrJNI.Driver_Deregister(this.swigCPtr, this);
  }

  @Override
  public boolean equals(final Object obj) {
    boolean equal = false;
    if (obj instanceof Driver) {
      equal = ((Driver)obj).swigCPtr == this.swigCPtr;
    }
    return equal;
  }

  public String getName() {
    return ogrJNI.Driver_name_get(this.swigCPtr, this);
  }

  public String GetName() {
    return ogrJNI.Driver_GetName(this.swigCPtr, this);
  }

  @Override
  public int hashCode() {
    return (int)this.swigCPtr;
  }

  public DataSource Open(final String utf8_path) {
    final long cPtr = ogrJNI.Driver_Open__SWIG_1(this.swigCPtr, this, utf8_path);
    return cPtr == 0 ? null : new DataSource(cPtr, true);
  }

  public DataSource Open(final String utf8_path, final int update) {
    final long cPtr = ogrJNI.Driver_Open__SWIG_0(this.swigCPtr, this,
      utf8_path, update);
    return cPtr == 0 ? null : new DataSource(cPtr, true);
  }

  public void Register() {
    ogrJNI.Driver_Register(this.swigCPtr, this);
  }

  public boolean TestCapability(final String cap) {
    return ogrJNI.Driver_TestCapability(this.swigCPtr, this, cap);
  }

}
